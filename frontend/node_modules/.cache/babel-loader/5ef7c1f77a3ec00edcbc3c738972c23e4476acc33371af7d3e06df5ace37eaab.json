{"ast":null,"code":"import * as React from 'react';\nexport const useOpenState = _ref => {\n  let {\n    open,\n    onOpen,\n    onClose\n  } = _ref;\n  const isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  const [openState, setIsOpenState] = React.useState(false); // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n\n  React.useEffect(() => {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  const setIsOpen = React.useCallback(newIsOpen => {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen\n  };\n};","map":{"version":3,"names":["React","useOpenState","open","onOpen","onClose","isControllingOpenProp","useRef","current","openState","setIsOpenState","useState","useEffect","Error","setIsOpen","useCallback","newIsOpen","isOpen"],"sources":["C:/Users/shino/Documents/WEB PROJECTS/LMS/frontend/node_modules/@mui/x-date-pickers/internals/hooks/useOpenState.js"],"sourcesContent":["import * as React from 'react';\nexport const useOpenState = ({\n  open,\n  onOpen,\n  onClose\n}) => {\n  const isControllingOpenProp = React.useRef(typeof open === 'boolean').current;\n  const [openState, setIsOpenState] = React.useState(false); // It is required to update inner state in useEffect in order to avoid situation when\n  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)\n\n  React.useEffect(() => {\n    if (isControllingOpenProp) {\n      if (typeof open !== 'boolean') {\n        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');\n      }\n\n      setIsOpenState(open);\n    }\n  }, [isControllingOpenProp, open]);\n  const setIsOpen = React.useCallback(newIsOpen => {\n    if (!isControllingOpenProp) {\n      setIsOpenState(newIsOpen);\n    }\n\n    if (newIsOpen && onOpen) {\n      onOpen();\n    }\n\n    if (!newIsOpen && onClose) {\n      onClose();\n    }\n  }, [isControllingOpenProp, onOpen, onClose]);\n  return {\n    isOpen: openState,\n    setIsOpen\n  };\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,MAAMC,YAAY,GAAG,QAItB;EAAA,IAJuB;IAC3BC,IAAI;IACJC,MAAM;IACNC;EACF,CAAC;EACC,MAAMC,qBAAqB,GAAGL,KAAK,CAACM,MAAM,CAAC,OAAOJ,IAAI,KAAK,SAAS,CAAC,CAACK,OAAO;EAC7E,MAAM,CAACC,SAAS,EAAEC,cAAc,CAAC,GAAGT,KAAK,CAACU,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3D;;EAEAV,KAAK,CAACW,SAAS,CAAC,MAAM;IACpB,IAAIN,qBAAqB,EAAE;MACzB,IAAI,OAAOH,IAAI,KAAK,SAAS,EAAE;QAC7B,MAAM,IAAIU,KAAK,CAAC,oEAAoE,CAAC;MACvF;MAEAH,cAAc,CAACP,IAAI,CAAC;IACtB;EACF,CAAC,EAAE,CAACG,qBAAqB,EAAEH,IAAI,CAAC,CAAC;EACjC,MAAMW,SAAS,GAAGb,KAAK,CAACc,WAAW,CAACC,SAAS,IAAI;IAC/C,IAAI,CAACV,qBAAqB,EAAE;MAC1BI,cAAc,CAACM,SAAS,CAAC;IAC3B;IAEA,IAAIA,SAAS,IAAIZ,MAAM,EAAE;MACvBA,MAAM,EAAE;IACV;IAEA,IAAI,CAACY,SAAS,IAAIX,OAAO,EAAE;MACzBA,OAAO,EAAE;IACX;EACF,CAAC,EAAE,CAACC,qBAAqB,EAAEF,MAAM,EAAEC,OAAO,CAAC,CAAC;EAC5C,OAAO;IACLY,MAAM,EAAER,SAAS;IACjBK;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}